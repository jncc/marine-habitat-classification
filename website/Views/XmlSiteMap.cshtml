@using Newtonsoft.Json.Linq
@inherits Umbraco.Web.Mvc.UmbracoTemplatePage
@{
    Layout = null;
    Response.ContentType = "text/xml";
    IPublishedContent siteHomePage = Model.Content.Site();
    string blacklistedDocumentTypeList = Model.Content.GetPropertyValue<string>("blacklistedDocumentTypes");
    string[] blackListedDocumentTypes = (!String.IsNullOrEmpty(blacklistedDocumentTypeList)) ? blacklistedDocumentTypeList.Split(new char[] { ',' }, StringSplitOptions.RemoveEmptyEntries) : new string[] { };
    var biotopes = Shared.GetJsonFromApi();

    var xpath = string.Format("//{0}[@nodeName = '{1}']", "biotopes", "Biotopes");
    var biotopeNode = Umbraco.TypedContentAtXPath(xpath).FirstOrDefault();
}<urlset xmlns="http://www.sitemaps.org/schemas/sitemap/0.9" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemalocation="http://www.google.com/schemas/sitemap/0.9 http://www.sitemaps.org/schemas/sitemap/0.9/sitemap.xsd" xmlns:image="http://www.google.com/schemas/sitemap-image/1.1">
    @RenderSiteMapUrlEntry(siteHomePage.UrlWithDomain(), siteHomePage.UpdateDate)
    @RenderSiteMapUrlEntriesForChildren(siteHomePage, blackListedDocumentTypes)
    @RenderSiteMapUrlEntriesForBiotopes(biotopeNode, biotopes)
</urlset>

@helper RenderSiteMapUrlEntry(string url, DateTime date)
{
    var changeFreq = "monthly";
    var priority = "0.5";
    <url>
        <loc>@EnsureUrlStartsWithDomain(url)</loc>
        <lastmod>@(string.Format("{0:s}+00:00", date))</lastmod>
        <changefreq>@changeFreq</changefreq>
        <priority>@priority</priority>
    </url>
}

@helper RenderSiteMapUrlEntriesForChildren(IPublishedContent parentPage, string[] documentTypeBlacklist)
{
    foreach (var page in parentPage.Children.Where(f => !documentTypeBlacklist.Contains(f.DocumentTypeAlias) && !f.GetPropertyValue<bool>("hideFromSiteMap")))
    {
        @RenderSiteMapUrlEntry(page.UrlWithDomain(), page.UpdateDate)
        if (page.Children.Any(f => !documentTypeBlacklist.Contains(f.DocumentTypeAlias) && !f.GetPropertyValue<bool>("hideFromSiteMap")))
        {
            @RenderSiteMapUrlEntriesForChildren(page, documentTypeBlacklist)
        }
    }
}

@helper RenderSiteMapUrlEntriesForBiotopes(IPublishedContent biotopeNode, JArray biotopes)
{
    foreach (var pair in biotopes)
    {
        @RenderSiteMapUrlEntry(biotopeNode.UrlWithDomain()+pair["BiotopeKey"].ToString().ToLower(), biotopeNode.UpdateDate)
    }
}

@functions {
    private static string EnsureUrlStartsWithDomain(string url)
    {
        if (url.StartsWith("http"))
        {
            return url;
        }
        else
        {
            var domainPrefix = string.Format("https://{0}/", HttpContext.Current.Request.ServerVariables["HTTP_HOST"]);
            return domainPrefix + url;
        }
    }
}