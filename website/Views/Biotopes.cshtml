@inherits UmbracoTemplatePage
@using System.Configuration
@using System.Text
@using Newtonsoft.Json.Linq
@{
    Layout = "Master.cshtml";

    var json = GetJsonFromApi();

    biotopeNodeMap = GetOrderedParentChildNodeMap(json);
    fullTermMap = GetFullTermMap(json);

    var treeString = GenerateJavascriptTreeString();


    var nodeColoursSetting = Model.Content.GetPropertyValue<string>("LevelColour");
    var levelColours = nodeColoursSetting.Split(',');
}
@functions
{
    private Dictionary<string, List<string>> biotopeNodeMap;
    private Dictionary<string, string> fullTermMap;

    private JArray GetJsonFromApi()
    {
        var url = ConfigurationManager.AppSettings["MicroserviceUrl"] + "/Biotope/";
        HttpWebRequest request = (HttpWebRequest)WebRequest.Create(url);
        request.Method = "GET";

        HttpWebResponse response = (HttpWebResponse)request.GetResponse();
        string content;
        using (StreamReader sr = new StreamReader(response.GetResponseStream()))
        {
            content = sr.ReadToEnd();
        }

        return JArray.Parse(content);
    }

    private Dictionary<string, List<string>> GetOrderedParentChildNodeMap(JArray json)
    {
        biotopeNodeMap = new Dictionary<string, List<string>>();
        foreach (var pair in json.OrderBy(p => p["SortCode"]))
        {
            var biotopeKey = pair["BiotopeKey"].ToString();
            var biotopeParentKey = pair["BiotopeParentKey"].ToString();

            if (!biotopeNodeMap.ContainsKey(biotopeParentKey))
            {
                biotopeNodeMap.Add(biotopeParentKey, new List<string> {biotopeKey});
            }
            else
            {
                var node = new List<string>();
                biotopeNodeMap.TryGetValue(biotopeParentKey, out node);
                node.Add(biotopeKey);
            }
        }

        return biotopeNodeMap;
    }

    private Dictionary<string, string> GetFullTermMap(JArray json)
    {
        fullTermMap = new Dictionary<string, string>();
        foreach (var pair in json)
        {
            fullTermMap.Add(pair["BiotopeKey"].ToString(), pair["FullTerm"].ToString());
        }

        return fullTermMap;
    }

    private string GenerateJavascriptTreeString()
    {
        var treeSB = new StringBuilder();
        treeSB.Append("[");
        foreach (var pair in biotopeNodeMap)
        {
            if (IsRootNode(pair.Value, pair.Key))
            {
                List<string> childrenWithoutSelf;
                childrenWithoutSelf = pair.Value;
                childrenWithoutSelf.Remove(pair.Key);

                string fullTerm;
                fullTermMap.TryGetValue(pair.Key, out fullTerm);
                treeSB.Append("{text:'").Append(fullTerm).Append("',");
                treeSB.Append("href:'").Append(string.Format("{0}biotope/{1}", Model.Content.Url, pair.Key)).Append("'");
                treeSB = GenerateTree(childrenWithoutSelf, treeSB, 1);
                treeSB.Append("}");
                if (!biotopeNodeMap.Last().Key.Equals(pair.Key))
                {
                    treeSB.Append(",");
                }
            }
        }
        treeSB.Append("]");

        return treeSB.ToString();
    }

    private StringBuilder GenerateTree(List<string> children, StringBuilder treeSB, int level)
    {
        if (children == null || children.Count < 1)
            return treeSB;

        treeSB.Append(", nodes:[");

        foreach (var child in children)
        {
            string fullTerm;
            fullTermMap.TryGetValue(child, out fullTerm);
            treeSB.Append("{text:'").Append(fullTerm).Append("',");
            treeSB.Append("href:'").Append(string.Format("{0}biotope/{1}", Model.Content.Url, child)).Append("'");

            List<string> grandChildren;
            biotopeNodeMap.TryGetValue(child, out grandChildren);
            if (grandChildren != null)
            {
                treeSB = GenerateTree(grandChildren, treeSB, level+1);
            }
            treeSB.Append("}");
            if (!children.Last().Equals(child))
            {
                treeSB.Append(",");
            }
        }
        treeSB.Append("]");

        return treeSB;
    }

    private bool IsRootNode(List<string> children, string key)
    {
        return children.Contains(key);
    }
}

@Html.Partial("~/Views/Partials/SectionHeader.cshtml")
<head><link rel="stylesheet" media="all" href="/css/bootstrap-treeview.min.css" /></head>
<script src="/Scripts/bootstrap.min.js"></script>
<script src="/Scripts/bootstrap-treeview.js"></script>
<script type="text/javascript">
    $(function() {
        var myTree = [{ text: "Marine", nodes: @Html.Raw(HttpUtility.HtmlDecode(treeString))}];
        $('#tree').treeview({
            data: myTree,
            levels: 6,
            enableLinks: true,
            collapseIcon: "glyphicon glyphicon-chevron-down",
            expandIcon: "glyphicon glyphicon-chevron-right",
            nodeIcon: "vocabful-colour-edge",
            highlightSelected: false,
            levelColors: ["@Html.Raw(HttpUtility.HtmlDecode(string.Join("\",\"", levelColours)))"]
        });
        $('#tree').treeview('expandToLevel', 2, { silent: true });
    });

    var expanded = false;

    function expandCollapseAll() {
        if (expanded) {
            $('#tree').treeview('collapseAll', { silent: true });
            document.getElementById("expandCollapseButton").value = "Expand All";
            expanded = false;
        } else {
            $('#tree').treeview('expandAll', { silent: true });
            document.getElementById("expandCollapseButton").value = "Collapse All";
            expanded = true;
        }
    }

    function expandLevel(level) {
        $('#tree').treeview('expandToLevel', level, { silent: true });
    }

</script>

<section class="section">
    <div class="container">
        <div class="grid-row">
            <div class="column-full">
                @Model.Content.GetPropertyValue("content")
            </div>
        </div>
        <div class="grid-row">
            <div class="column-full">
            </div>
            <div class="column-full">
                <p>
                    <input class="button colour-button" style="background-color: @levelColours[0]" type="submit" value="Level 1" onclick="expandLevel(1)" />
                    <input class="button colour-button" style="background-color: @levelColours[1]" type="submit" value="Level 2" onclick="expandLevel(2)" />
                    <input class="button colour-button" style="background-color: @levelColours[2]" type="submit" value="Level 3" onclick="expandLevel(3)" />
                    <input class="button colour-button" style="background-color: @levelColours[3]" type="submit" value="Level 4" onclick="expandLevel(4)" />
                    <input class="button colour-button" style="background-color: @levelColours[4]" type="submit" value="Level 5" onclick="expandLevel(5)" />
                    <input class="button colour-button" style="background-color: @levelColours[5]" type="submit" value="Level 6" onclick="expandLevel(6)" />
                </p>
            </div>
            <div class="column-full">
                <div id="tree"></div>
            </div>
        </div>
    </div>
</section>