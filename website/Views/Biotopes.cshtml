@inherits Umbraco.Web.Mvc.UmbracoTemplatePage
@using System.Configuration
@using System.Text
@using Newtonsoft.Json.Linq
@using website.Models
@{
    Layout = "Master.cshtml";

    var url = ConfigurationManager.AppSettings["MicroserviceUrl"] + "/Biotope/";
    HttpWebRequest request = (HttpWebRequest)WebRequest.Create(url);
    request.Method = "GET";

    HttpWebResponse response = (HttpWebResponse)request.GetResponse();
    string content;
    using (StreamReader sr = new StreamReader(response.GetResponseStream()))
    {
        content = sr.ReadToEnd();
    }

    var json = JArray.Parse(content);

    var biotopeNodeMap = new Dictionary<string, BiotopeTreeNode>();
    var fullTermMap = new Dictionary<string, string>();

    foreach (var pair in json.OrderBy(p => p["SortCode"]))
    {
        var biotopeKey = pair["BiotopeKey"].ToString();
        var biotopeParentKey = pair["BiotopeParentKey"].ToString();
        var fullTerm = pair["FullTerm"].ToString();
        var sortCode = pair["SortCode"].ToString();

        if (!biotopeNodeMap.ContainsKey(biotopeParentKey))
        {
            biotopeNodeMap.Add(biotopeParentKey, new BiotopeTreeNode
            {
                Children = new List<string> {biotopeKey},
                SortCode = sortCode
            });
        }
        else
        {
            var node = new BiotopeTreeNode();
            biotopeNodeMap.TryGetValue(biotopeParentKey, out node);
            node.Children.Add(biotopeKey);
        }

        fullTermMap.Add(biotopeKey, fullTerm);
    }


    var treeSB = new StringBuilder();
    foreach (var pair in biotopeNodeMap)
    {
        if (IsRootNode(pair.Value.Children, pair.Key))
        {
            List<string> childrenWithoutSelf;
            childrenWithoutSelf = pair.Value.Children;
            childrenWithoutSelf.Remove(pair.Key);

            string fullTerm;
            fullTermMap.TryGetValue(pair.Key, out fullTerm);
            treeSB.Append("{text:'").Append(fullTerm).Append("',");
            treeSB.Append("href:'").Append(string.Format("{0}biotope/{1}", Model.Content.Url, pair.Key)).Append("'");
            treeSB = GenerateTree(childrenWithoutSelf, treeSB, biotopeNodeMap, fullTermMap);
            treeSB.Append("},");
            //            if (parentChildMap.Last().Equals(pair))
            //            {
            //                treeSB.Append(",");
            //            }
        }
    }
    var treeString = treeSB.ToString();
}
@functions
{
    private StringBuilder GenerateTree(List<string> children, StringBuilder treeStringBuilder, Dictionary<string, BiotopeTreeNode> biotopeNodeMap, Dictionary<string, string> fullTermMap)
    {
        if (children == null || children.Count < 1)
            return treeStringBuilder;

        treeStringBuilder.Append(", nodes:[");

        foreach (var child in children)
        {
            string fullTerm;
            fullTermMap.TryGetValue(child, out fullTerm);
            treeStringBuilder.Append("{text:'").Append(fullTerm).Append("',");
            treeStringBuilder.Append("href:'").Append(string.Format("{0}biotope/{1}", Model.Content.Url, child)).Append("'");

            BiotopeTreeNode grandChild;
            biotopeNodeMap.TryGetValue(child, out grandChild);
            if (grandChild != null)
            {
                treeStringBuilder = GenerateTree(grandChild.Children, treeStringBuilder, biotopeNodeMap, fullTermMap);
            }
            treeStringBuilder.Append("},");
    //            if (!children.Last().Equals(child))
            //            {
            //                treeStringBuilder.Append(",");
            //            }
        }
        treeStringBuilder.Append("]");

        return treeStringBuilder;
    }

    private bool IsRootNode(List<string> children, string key)
    {
        return children.Contains(key);
    }
}

@Html.Partial("~/Views/Partials/SectionHeader.cshtml")

<script type="text/javascript">
    $(function() {
        var myTree = [
            @Html.Raw(HttpUtility.HtmlDecode(treeString))
        ];
        $('#tree').treeview({
            data: myTree,
            levels: 6,
            enableLinks: true
        });
    });
</script>

<section class="section">
    <div class="container">
        <div class="biotope-grid">
            <div id="tree"></div>
        </div>
    </div>
</section>