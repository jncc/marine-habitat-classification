@inherits UmbracoTemplatePage
@using System.Configuration
@using System.Text
@using Newtonsoft.Json.Linq
@{
    Layout = "Master.cshtml";

    var json = GetJsonFromApi();

    biotopeNodeMap = GetOrderedParentChildNodeMap(json);
    fullTermMap = GetFullTermMap(json);


    var nodeColoursSetting = Model.Content.GetPropertyValue<string>("LevelColour");
    levelColours = nodeColoursSetting.Split(',');
}
@functions
{
    private Dictionary<string, List<string>> biotopeNodeMap;
    private Dictionary<string, string> fullTermMap;
    private string[] levelColours;

    private JArray GetJsonFromApi()
    {
        var url = ConfigurationManager.AppSettings["MicroserviceUrl"] + "/Biotope/";
        var request = (HttpWebRequest)WebRequest.Create(url);
        request.Method = "GET";

        var response = (HttpWebResponse)request.GetResponse();
        string content;
        using (StreamReader sr = new StreamReader(response.GetResponseStream()))
        {
            content = sr.ReadToEnd();
        }

        return JArray.Parse(content);
    }

    private Dictionary<string, List<string>> GetOrderedParentChildNodeMap(JArray json)
    {
        biotopeNodeMap = new Dictionary<string, List<string>>();
        foreach (var pair in json.OrderBy(p => p["SortCode"]))
        {
            var biotopeKey = pair["BiotopeKey"].ToString();
            var biotopeParentKey = pair["BiotopeParentKey"].ToString();

            if (!biotopeNodeMap.ContainsKey(biotopeParentKey))
            {
                biotopeNodeMap.Add(biotopeParentKey, new List<string> {biotopeKey});
            }
            else
            {
                var node = new List<string>();
                biotopeNodeMap.TryGetValue(biotopeParentKey, out node);
                node.Add(biotopeKey);
            }
        }

        return biotopeNodeMap;
    }

    private Dictionary<string, string> GetFullTermMap(JArray json)
    {
        fullTermMap = new Dictionary<string, string>();
        foreach (var pair in json)
        {
            fullTermMap.Add(pair["BiotopeKey"].ToString(), pair["FullTerm"].ToString());
        }

        return fullTermMap;
    }

    private string GenerateBiotopeNodeTree()
    {
        var treeSB = new StringBuilder();

        treeSB.Append("<li>");
        treeSB.Append("<a href=\"#\"><span></span>");
        treeSB.Append(string.Format("<span class=\"tag vocabful-colour-edge\" style=\"background-color: {0}\"></span>", levelColours[0]));
        treeSB.Append("Marine</a>");

        treeSB.Append("<ul>");

        foreach (var pair in biotopeNodeMap)
        {
            if (IsRootNode(pair.Value, pair.Key))
            {

                List<string> childrenWithoutSelf;
                childrenWithoutSelf = pair.Value;
                childrenWithoutSelf.Remove(pair.Key);

                string fullTerm;
                fullTermMap.TryGetValue(pair.Key, out fullTerm);

                
                treeSB.Append("<li>");
                if (childrenWithoutSelf.Count > 0)
                {
                    treeSB.Append("<a href=\"#\">");
                    treeSB.Append("<span></span>");
                    treeSB.Append("</a>");
                }
                treeSB.Append(string.Format("<span class=\"tag vocabful-colour-edge\" style=\"background-color: {0}\"></span>", levelColours[1]));
                treeSB.Append("<a href=\"");
                treeSB.Append(string.Format("{0}biotope/{1}", Model.Content.Url, pair.Key));
                treeSB.Append("\">");
                treeSB.Append(fullTerm);
                treeSB.Append("</a>");
                treeSB.Append(GenerateTree(childrenWithoutSelf, 1));
                treeSB.Append("</li>");
            }
        }
        treeSB.Append("</ul>");
        treeSB.Append("</li>");

        return treeSB.ToString();
    }

    private string GenerateTree(List<string> children, int level)
    {
        if (children == null || children.Count < 1)
            return null;

        var treeSB = new StringBuilder();

        treeSB.Append("<ul>");
        foreach (var child in children)
        {
            string fullTerm;
            fullTermMap.TryGetValue(child, out fullTerm);

            List<string> grandChildren;
            biotopeNodeMap.TryGetValue(child, out grandChildren);

            treeSB.Append("<li>");
            if (grandChildren != null && grandChildren.Count > 0)
            {
                treeSB.Append("<a href=\"#\">");
                treeSB.Append("<span></span>");
                treeSB.Append("</a>");
            }
            treeSB.Append(string.Format("<span class=\"tag vocabful-colour-edge\" style=\"background-color: {0}\"></span>", levelColours[level+1]));
            treeSB.Append("<a href=\"");
            treeSB.Append(string.Format("{0}biotope/{1}", Model.Content.Url, child));
            treeSB.Append("\">");
            treeSB.Append(fullTerm);
            treeSB.Append("</a>");
            if (grandChildren != null)
            {
                treeSB.Append(GenerateTree(grandChildren, level + 1));
            }
            treeSB.Append("</li>");
        }
        treeSB.Append("</ul>");

        return treeSB.ToString();
    }

    private bool IsRootNode(List<string> children, string key)
    {
        return children.Contains(key);
    }
}

<script src="/Scripts/jquery-3.0.0.min.js"></script>
<script type="text/javascript">

    function expandLevel(level) {
        $('.mtree li:has(ul)').each(function (index, val) {
            var nodeLevel = $(this).parentsUntil($('ul.mtree'), 'ul').length + 1;

            $(this).attr('class', 'mtree-node mtree-' + ((level <= nodeLevel) ? 'closed' : 'open'));
            $(this).children('a').first().children('span').first().attr('class', (level <= nodeLevel) ? 'closed' : 'open');
            $(this).children('ul').css({ 'overflow': 'hidden', 'height': (level < nodeLevel + 1) ? 0 : 'auto', 'display': (level < nodeLevel + 1) ? 'none' : 'block' });
        });
    }

</script>

<div class="container">
    <br />
    @Html.Partial("~/Views/Partials/SectionHeader.cshtml")

    @Model.Content.GetPropertyValue("content")
    <br />
    <div class="row">
        <p>
            <input class="button colour-button" style="background-color: @levelColours[0]" type="submit" value="Level 1" onclick="expandLevel(1)" />
            <input class="button colour-button" style="background-color: @levelColours[1]" type="submit" value="Level 2" onclick="expandLevel(2)" />
            <input class="button colour-button" style="background-color: @levelColours[2]" type="submit" value="Level 3" onclick="expandLevel(3)" />
            <input class="button colour-button" style="background-color: @levelColours[3]" type="submit" value="Level 4" onclick="expandLevel(4)" />
            <input class="button colour-button" style="background-color: @levelColours[4]" type="submit" value="Level 5" onclick="expandLevel(5)" />
            <input class="button colour-button" style="background-color: @levelColours[5]" type="submit" value="Level 6" onclick="expandLevel(6)" />
        </p>
    </div>
    @*<div class="row">
            <div id="tree"></div>
        </div>*@
    <ul class="mtree" style="opacity: 1;">
        @Html.Raw(GenerateBiotopeNodeTree())
    </ul>
    <script src="/Scripts/mtree/mtree.js"></script>
    <br />
</div>