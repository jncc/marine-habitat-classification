@inherits UmbracoTemplatePage
@using System.Configuration
@using Newtonsoft.Json.Linq
@{
    var umbracoBiotopeUrl = CurrentPage.UrlWithDomain() + "biotopes/biotope/";

    // Getting the Biotopes node which will have the level colours, this shouldn't change
    var nodeColoursSetting = ConfigurationManager.AppSettings["BiotopeTreeColours"];
    var levelColours = nodeColoursSetting.Split(',');

    var result = new JObject();
    var searchResults = new JArray();
    var totalResults = 0;
    var totalPages = 0;

    var query = Request.QueryString["q"];
    int page;
    int.TryParse(Request.QueryString["p"], out page);

    if (!string.IsNullOrEmpty(query))
    {
        if (page > 1)
        {
            result = Search(query, page);
        }
        else
        {
            result = Search(query, 1);
        }

        searchResults = JArray.FromObject(result["documents"]);
        totalResults = result["totalAvailable"].ToObject<int>();
        totalPages = (int)Math.Ceiling((double)totalResults/itemsPerPage);
    }
}
@functions {
    private int itemsPerPage = 15;

    private JObject Search(string query, int page)
    {
        var searchUrl = ConfigurationManager.AppSettings["BiotopeSearchUrl"] + "/indices/biotope/search";
        // Special formatting for original code because the standard tokenizer doesn't split by full stops
        var searchQuery = @"anyof(fullTerm,'" + query + "', -boost '50') or anyof(originalCode,'" + query.Trim().Replace('.', ' ') + "', -boost '45') or anyof(description,'" + query + "', -boost '10')";
        var requestString = searchUrl + "?c=*&q=" + searchQuery + "&count=" + itemsPerPage + "&skip=" + itemsPerPage * (page - 1);

        var request = (HttpWebRequest)WebRequest.Create(requestString);
        request.Method = "GET";

        var response = (HttpWebResponse)request.GetResponse();
        string content;
        using (StreamReader sr = new StreamReader(response.GetResponseStream()))
        {
            content = sr.ReadToEnd();
        }

        return JObject.Parse(JObject.Parse(content)["data"].ToString());
    }
}

<head>
    <link rel="stylesheet" media="all" href="~/App_Plugins/MarineHabitatClassification/css/biotope.min.css" />

    <script type="text/javascript">
    var levelColors = ["@Html.Raw(HttpUtility.HtmlDecode(string.Join("\",\"", levelColours)))"];
    var itemsPerPage = @itemsPerPage;

    $(function () {
        $("#searchBox").keyup(function(event) {
            if (event.keyCode === 13) {
                search(1);
            }
        });
    });

    function search(page) {
        var query = document.getElementById("searchBox").value;
        var paramString = '&q=' + query + '&p=' + page;
        window.location.search = paramString;
    }
    </script>
</head>

<div id="biotope-search-results">
    <div id="noOfResults" class="search-result">
        @if (!string.IsNullOrEmpty(query) && searchResults.Count == 1)
        {
            <span>1 result found</span>
        }
        else if (!string.IsNullOrEmpty(query))
        {
            <span>@result["totalAvailable"] results found</span>
        }
    </div>
    <div id="searchResults" class="search-result">
        @foreach (var pair in searchResults)
        {
            <div class="search-result">
                <h3>
                    <span class="icon" style="background-color: @levelColours[int.Parse(pair["fields"]["hierarchyLevel"].ToString())]">&nbsp;&nbsp;</span>
                    <span class="biotope-code">@pair["fields"]["originalCode"].ToString().Replace(' ', '.')</span>&nbsp;&nbsp;<a href="@umbracoBiotopeUrl@pair["id"]">@Html.Raw(HttpUtility.HtmlDecode(pair["fields"]["fullTerm"].ToString()))</a>
                </h3>
                <div class="description">@Html.Raw(HttpUtility.HtmlDecode(pair["fields"]["description"].ToString()))</div>
            </div>
        }
    </div>
    <div id="pageNav" class="pagination">
        @if (totalResults > itemsPerPage)
        {
            if (page != 1)
            {
                <span class="page link-page" onClick="search(@page-1)">«</span>
            }

            for (var x = 1; x <= totalPages; x++)
            {
                if (page == x)
                {
                    <span class="page">@x</span>
                }
                else
                {
                    <span class="page link-page" onClick="search(@x)">@x</span>
                }
            }

            if (page != totalPages)
            {
                <span class="page link-page" onClick="search(@page+1)">»</span>
            }
        }
    </div>
</div>